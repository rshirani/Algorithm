import java.util.Vector;

public class Utility {

	public static int minDepth(Node<Integer> root){
		if(root == null)
		{
			return 0;
		}
		if(root.left == null && root.right == null)
		{
			return 1;
		}
		if(root.left == null)
		{
			return 1+minDepth(root.right);
		}
		if(root.right == null)
		{
			return 1+minDepth(root.left);
		}
		
		return Math.min(minDepth(root.left), minDepth(root.right));
	}
	
	public static Vector<Node<Integer>> minDepthNode(Node<Integer> root){
		if (root == null)
		{
			return new Vector<Node<Integer>>();
		}
		if (root.left == null && root.right == null)
		{
			Vector<Node<Integer>> nodes = new Vector<Node<Integer>>();
			nodes.add(root);
			return nodes;
		}
		Vector<Node<Integer>> rightDepth = minDepthNode(root.right);
		Vector<Node<Integer>> leftDepth =  minDepthNode(root.left);
		
		Vector<Node<Integer>> result = new Vector<Node<Integer>>();
		if (rightDepth.size() > leftDepth.size())
		{		
			result.addAll(leftDepth);
			
		}else{
			result.addAll(rightDepth);
		}
		return 	result;
	}
}
